% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/movecheck.R
\name{movecheck}
\alias{movecheck}
\title{Function to explore whether moving the (X,Y) location of any single pattern may improve POSAC performance}
\usage{
movecheck(X, Y, patmat, freqs)
}
\arguments{
\item{X}{The initial X values assigned to each pattern.}

\item{Y}{The initial Y values assigned to each pattern.}

\item{patmat}{A matrix of patterns of values across. Each row of the matrix should represents a distinct pattern with no duplicates. The columns are the variables defining the patterns.}

\item{freqs}{A vector of frequencies of each pattern. This should have the same length as nrow(patmat).}
}
\value{
The function returns a list with the following elements:
\describe{
  \item{CurrentCorrect}{The percentage of pairs correctly mapped by the POSAC function to begin with.}
  \item{BestMove}{Details of the best possible move including an updated per cent correct. This need not be above the current value.}
}
}
\description{
This function takes an existing set of X and Y estimates, a matrix of patterns, and the frequencies of the patterns and examines whether
moving the (X,Y) coordinates of any one pattern may improve the criterion value that POSAC attempts to optimise.
As such this function can be used as one check of whether the results from the POSAC function itself are optimal.
Note that this function works by an exhaustive search for all patterns across the grid of all possible positionings.
As such, it is quite slow and probably only worth applying once a fairly good initial solution has been found.
}
\examples{
\dontrun{
#Look at whether initial POSAC solution for CRASdata can be improved
posac2=POSAC(CRASdata[,1:5],CRASdata[,6])
Sys.time()
moves=movecheck(posac2$X,posac2$Y,posac2$patmat,posac2$freq)
Sys.time()
moves
#now update the posac analysis to reflect improved results
newX=rank(replace(posac2$X,moves$BestMove$Case,moves$BestMove$NewX))
newY=rank(replace(posac2$Y,moves$BestMove$Case,moves$BestMove$NewY))
posac3=POSACupdate(posac2,newX,newY)
posac3
#recheck (slow)
Sys.time()
moves2=movecheck(posac3$X,posac3$Y,posac3$patmat,posac3$freq)
Sys.time()
moves2
#try an iterative approach to update everything until no improvement possible (NOTE: very slow to run)
stop=FALSE
XCURR=posac2$X
YCURR=posac2$Y
print(Sys.time())
while(stop==FALSE){
moves2=movecheck(XCURR,YCURR,posac2$patmat,posac2$freq)
print(Sys.time())
print(moves2$BestMove$pccorrect)
if(moves2$CurrentCorrect==moves2$BestMove$pccorrect){stop=TRUE}
XCURR=rank(replace(XCURR,moves2$BestMove$Case,moves2$BestMove$NewX))
YCURR=rank(replace(YCURR,moves2$BestMove$Case,moves2$BestMove$NewY))
}
#update final POSAC results again
posac3=POSACupdate(posac2,XCURR,YCURR)
 }
}
\keyword{Scalogram}
